1+2
set.seed(2)
rnorm(8)
rnorm(2)
set.seed(2)
rnorm(4)
set.seed(2)
x10 <- rnorm(10)
rm(list-ls())
mean(x1000)
sd.out(sd(x10))
all.sds
sd(x10)
sd(x100)
sd(x100)
sd(x1000)
max.puppies <- 1
hometown <- 'Redwood City'
my.name <- 'Mariah'
height <- '5 feet and 1 inch'
puppies <- 1
puppy.price <- 800
total.cost <- 800
too.expensive <- total.cost > 1000
max.puppies <- 1
my.height
my.height
my.name
my.height
puppies
my.height <- 61 #inches
my.height
budget <- 1000
budget
too.expensive <- total.cost > budget
too.expensive
max.puppies <- budget / puppy.price
max.puppies
budget
puppy.price
puppy.price <- 300
max.puppies
max.puppies <- budget / puppy.price
max.puppies
AddThree
AddThree <-(a) {
return (a + 3)
}
AddThree <- function(a) {
return (a + 3)
}
# Write a function `AddThree` that adds 3 to an input value
AddThree <- function(a) {
return (a + 3)
}
AddThree(3)
ten <- AddThree(7)
ten
FeetToMeters <-function(feet) {
return(feet * 0.3048)
}
height.in.feet <- 61
height.in.meters <- FeetToMeters(height.in.feet)
first.ten <- c(10:20)
next.ten <- c(21:30)
all.numbers <- first.ten + next.ten
all.numbers <- c(first.ten, next.ten)
elevent <- all.numbers[11]
some.numbers <- all.numbers[2:5]
CompareLenght <- function(a, b){
return 'The difference in lengths is N'
}
CompareLenght <- function(a, b){
return "The difference in lengths is N"
}
CompareLenght <- function(a, b){
return (The difference in lengths is N)
}
CompareLenght <- function(a, b){
return ("The difference in lengths is N")
}
a <- c(1:4)
b <- c(1:6)
a
b
DescribeDifference <- function(a, b){
if (a > b) return("Your first vector is longer by N elements")
else return("Your second vector is longer by N elements")
}
return()
return()
c <- c(2:7)
d <- c(3:6)
c
d
DescribeDifference <- function(c, d){
if (c > d){
return(paste("Your first vector is longer by N elements"))
} else {
return(paste("Your second vector is longer by N elements"))
}
}
return
DesribeDifference
DescribeDifference
CompareLenght <- function(a, b){
if (a > b) {
N <- length(a) - length(b)
} else {
N <- length(b) - length(a)
}
return (paste("The difference in lengths is"), N)
}
N
DescribeDifference(1:10, 3:12)
CompareLength(c(1:3), 1:8)
library(jsonlite)
library(httr)
base.url <- "http://www.omdbapi.com/?"
movie <- "The Adjustment Bureau"
request <- GET(base.url, query = query.parameters)
query.parameters <- list(t= movie, r="json")
request <- GET(base.url, query = query.parameters)
body <- content(request, "text")
movie.data <- fromJSON(body)
movie.df <- as.data.frame(movie.data)
Director <- function(movies) {
result <- paste(movies$Title, "was directed by", movies$Director)
return (result)
}
movie.directory <- Director(movie.df)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
setwd("~/")
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
data <- womensrole
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
#Load the dataset 'womensrole' from the HSUAR package (same way you would load a built in dataset)
data <- womensrole
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
library(HSAUR)
install.packages('HSAUR')
library(HSAUR)
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
data <- womensrole
ggplot(plot.data, aes(x=education, y=thoughts, color=factor(sex))) + geom_point()
#INFO 201 M18 Exercise 5 Server
install.packages('HSAUR')
#Require the following: shiny, HSUAR, dyplr, and ggplot2
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
#Load the dataset 'womensrole' from the HSUAR package (same way you would load a built in dataset)
data <- womensrole
#Here you will define the data that is shown based on your inputs defined in the UI
#and turn it into an output plot
#Hint: reference the input values using 'input$inputID'
shinyServer(function(input, output) {
#plotNameHere will become what you named your plot in the UI
output$plotNamehere <- renderPlot({
#Here use your different input values to define what data is used to render your plot
#The x axis will be the level of education
#The y axis will be the level of agreement or disagreement
#The dataset used will be filtered by sex
#Filter the dataset based on whether the input is Men, Women, or Both
if(input$sex == "Men") {
plot.dataset <- data %>% filter(sex == "Male")
} else if (input$sex == "Women") {
plot.dataset <- data %>% filter(sex == "Female")
} else {
plot.dataset <- data
}
#Define a y axis value based on the input Agree or Disagree
if(input$thoughts == "Agree") {
thoughts = plot.dataset$agree
} else {
thoughts = plot.dataset$disagree
}
#Using the values you just defined, construct a scatterplot using ggplot2
#x will be defined by education, y by agree/disagree
#Bonus: Factor the color field by sex
#(this will allow you to visually see the difference between Men and Women when Both are selected)
ggplot(plot.dataset, aes(x=education, y=thoughts, color=factor(sex))) + geom_point()
})
})
shinyServer(function(input, output) {
#plotNameHere will become what you named your plot in the UI
output$plotNamehere <- renderPlot({
#Here use your different input values to define what data is used to render your plot
#The x axis will be the level of education
#The y axis will be the level of agreement or disagreement
#The dataset used will be filtered by sex
#Filter the dataset based on whether the input is Men, Women, or Both
if(input$sex == "Men") {
plot.dataset <- data %>% filter(sex == "Male")
} else if (input$sex == "Women") {
plot.dataset <- data %>% filter(sex == "Female")
} else {
plot.dataset <- data
}
#Define a y axis value based on the input Agree or Disagree
if(input$thoughts == "Agree") {
thoughts = plot.dataset$agree
} else {
thoughts = plot.dataset$disagree
}
#Using the values you just defined, construct a scatterplot using ggplot2
#x will be defined by education, y by agree/disagree
#Bonus: Factor the color field by sex
#(this will allow you to visually see the difference between Men and Women when Both are selected)
ggplot(plot.dataset, aes(x=education, y=thoughts, color=factor(sex))) + geom_point()
})
})
library(shiny)
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("The Role of Females in Society"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
selectInput(inputId = "sex",
label = "Sex:",
choices = c("Men", "Women", "Both"),
selected = "Both"),
#selectInput for Agree or Disagree
#inputID = thoughts
selectInput(inputId = "thoughts",
label = "Who:",
choices = c("Agree", "Disagree"),
selected= "Agree")
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("The Role of Females in Society"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
selectInput(inputId = "sex",
label = "Sex:",
choices = c("Men", "Women", "Both"),
selected = "Both"),
#selectInput for Agree or Disagree
#inputID = thoughts
selectInput(inputId = "thoughts",
label = "Who:",
choices = c("Agree", "Disagree"),
selected= "Agree")
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
setwd("~/Desktop/info201hw/final_project_test/script")
setwd("~/Desktop/info201hw/final_project_test")
shiny::runApp()
